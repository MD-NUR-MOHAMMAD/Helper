Creating **custom post types** and **meta boxes** in WordPress allows you to extend its default functionality by adding new types of content and custom fields. Hereâ€™s how to create both:

---

### **1. Creating a Custom Post Type**
A **custom post type** enables you to define a new content type beyond the default (posts, pages, etc.).

#### Example: Create a "Books" Custom Post Type
Add this code to your plugin or theme's `functions.php` file:

```php
function my_custom_post_type() {
    $labels = array(
        'name'               => 'Books',
        'singular_name'      => 'Book',
        'menu_name'          => 'Books',
        'name_admin_bar'     => 'Book',
        'add_new'            => 'Add New',
        'add_new_item'       => 'Add New Book',
        'new_item'           => 'New Book',
        'edit_item'          => 'Edit Book',
        'view_item'          => 'View Book',
        'all_items'          => 'All Books',
        'search_items'       => 'Search Books',
        'not_found'          => 'No books found.',
        'not_found_in_trash' => 'No books found in Trash.'
    );

    $args = array(
        'labels'             => $labels,
        'public'             => true,
        'has_archive'        => true,
        'menu_icon'          => 'dashicons-book',
        'supports'           => array( 'title', 'editor', 'thumbnail', 'custom-fields' ),
        'show_in_rest'       => true, // Enables block editor support.
    );

    register_post_type( 'book', $args );
}
add_action( 'init', 'my_custom_post_type' );
```

**Result**: A new **"Books"** post type appears in the WordPress admin panel. You can now create and manage "Book" posts.

---

### **2. Creating Custom Meta Boxes**
Meta boxes provide a way to add custom fields to post types.

#### Example: Add a "Publisher" Field to "Books"
```php
function my_custom_meta_box() {
    add_meta_box(
        'book_details_meta_box',       // Unique ID
        'Book Details',                // Box title
        'book_meta_box_html',          // Callback function
        'book'                         // Post type
    );
}
add_action( 'add_meta_boxes', 'my_custom_meta_box' );

function book_meta_box_html( $post ) {
    $publisher = get_post_meta( $post->ID, '_book_publisher', true );
    ?>
    <label for="book_publisher">Publisher:</label>
    <input type="text" name="book_publisher" id="book_publisher" value="<?php echo esc_attr( $publisher ); ?>" />
    <?php
}

function save_book_meta_box( $post_id ) {
    if ( array_key_exists( 'book_publisher', $_POST ) ) {
        update_post_meta(
            $post_id,
            '_book_publisher',
            sanitize_text_field( $_POST['book_publisher'] )
        );
    }
}
add_action( 'save_post', 'save_book_meta_box' );
```

**Explanation**:
- The `add_meta_box` function adds a new box for entering a **Publisher**.
- The `book_meta_box_html` function renders the input field.
- The `save_book_meta_box` function saves the publisher data when the post is saved.

---

### **3. Using Custom Meta Fields**
In your theme, you can display the custom meta field like this:

```php
$publisher = get_post_meta( get_the_ID(), '_book_publisher', true );
if ( $publisher ) {
    echo '<p>Publisher: ' . esc_html( $publisher ) . '</p>';
}
```

---

### **Best Practices**
1. **Prefix meta keys** to avoid conflicts (`_book_publisher`).
2. **Sanitize and validate** input data to ensure security.
3. **Use `register_post_type_args` filter** to modify post types dynamically.

Custom post types and meta boxes allow you to tailor WordPress to your specific needs, building anything from portfolios to e-commerce platforms.