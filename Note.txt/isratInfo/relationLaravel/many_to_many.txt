In Laravel, a **many-to-many relationship** is used when each record in one table can be related to multiple records in another table, and vice versa. This is often accomplished using a **pivot table**. Below are five examples of many-to-many relationships with practical use cases in Laravel 11:

### 1. **Roles and Users (User-Role Relationship)**
In many applications, users can have multiple roles, and roles can be assigned to multiple users.

#### Migration: `users` Table
```php
Schema::create('users', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->string('email')->unique();
    $table->timestamps();
});
```

#### Migration: `roles` Table
```php
Schema::create('roles', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->timestamps();
});
```

#### Migration: `role_user` (Pivot Table)
```php
Schema::create('role_user', function (Blueprint $table) {
    $table->foreignId('user_id')->constrained()->onDelete('cascade');
    $table->foreignId('role_id')->constrained()->onDelete('cascade');
});
```

#### Model Setup
```php
class User extends Model
{
    public function roles()
    {
        return $this->belongsToMany(Role::class);
    }
}

class Role extends Model
{
    public function users()
    {
        return $this->belongsToMany(User::class);
    }
}
```

### 2. **Products and Categories**
A product can belong to multiple categories, and a category can contain multiple products.

#### Migration: `products` Table
```php
Schema::create('products', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->decimal('price', 8, 2);
    $table->timestamps();
});
```

#### Migration: `categories` Table
```php
Schema::create('categories', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->timestamps();
});
```

#### Migration: `category_product` (Pivot Table)
```php
Schema::create('category_product', function (Blueprint $table) {
    $table->foreignId('category_id')->constrained()->onDelete('cascade');
    $table->foreignId('product_id')->constrained()->onDelete('cascade');
});
```

#### Model Setup
```php
class Product extends Model
{
    public function categories()
    {
        return $this->belongsToMany(Category::class);
    }
}

class Category extends Model
{
    public function products()
    {
        return $this->belongsToMany(Product::class);
    }
}
```

### 3. **Students and Courses**
A student can be enrolled in many courses, and a course can have many students.

#### Migration: `students` Table
```php
Schema::create('students', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->timestamps();
});
```

#### Migration: `courses` Table
```php
Schema::create('courses', function (Blueprint $table) {
    $table->id();
    $table->string('title');
    $table->timestamps();
});
```

#### Migration: `course_student` (Pivot Table)
```php
Schema::create('course_student', function (Blueprint $table) {
    $table->foreignId('student_id')->constrained()->onDelete('cascade');
    $table->foreignId('course_id')->constrained()->onDelete('cascade');
});
```

#### Model Setup
```php
class Student extends Model
{
    public function courses()
    {
        return $this->belongsToMany(Course::class);
    }
}

class Course extends Model
{
    public function students()
    {
        return $this->belongsToMany(Student::class);
    }
}
```

### 4. **Authors and Books**
An author can write multiple books, and a book can have multiple authors.

#### Migration: `authors` Table
```php
Schema::create('authors', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->timestamps();
});
```

#### Migration: `books` Table
```php
Schema::create('books', function (Blueprint $table) {
    $table->id();
    $table->string('title');
    $table->timestamps();
});
```

#### Migration: `author_book` (Pivot Table)
```php
Schema::create('author_book', function (Blueprint $table) {
    $table->foreignId('author_id')->constrained()->onDelete('cascade');
    $table->foreignId('book_id')->constrained()->onDelete('cascade');
});
```

#### Model Setup
```php
class Author extends Model
{
    public function books()
    {
        return $this->belongsToMany(Book::class);
    }
}

class Book extends Model
{
    public function authors()
    {
        return $this->belongsToMany(Author::class);
    }
}
```

### 5. **Tags and Posts**
A post can have multiple tags, and a tag can be applied to multiple posts.

#### Migration: `posts` Table
```php
Schema::create('posts', function (Blueprint $table) {
    $table->id();
    $table->string('title');
    $table->text('body');
    $table->timestamps();
});
```

#### Migration: `tags` Table
```php
Schema::create('tags', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->timestamps();
});
```

#### Migration: `post_tag` (Pivot Table)
```php
Schema::create('post_tag', function (Blueprint $table) {
    $table->foreignId('post_id')->constrained()->onDelete('cascade');
    $table->foreignId('tag_id')->constrained()->onDelete('cascade');
});
```

#### Model Setup
```php
class Post extends Model
{
    public function tags()
    {
        return $this->belongsToMany(Tag::class);
    }
}

class Tag extends Model
{
    public function posts()
    {
        return $this->belongsToMany(Post::class);
    }
}
```

### Syncing Relationships Example
In any of these cases, you can easily sync relationships with the `sync()` method:

```php
$user = User::find(1);
$user->roles()->sync([1, 2, 3]); // Sync roles with the user
```

These examples showcase various ways to implement many-to-many relationships in Laravel 11. The `belongsToMany()` method is key in establishing these connections.
Here are five more examples of **many-to-many relationships** in Laravel 11 with practical use cases:

### 6. **Projects and Employees**
A project can have multiple employees working on it, and an employee can work on multiple projects.

#### Migration: `projects` Table
```php
Schema::create('projects', function (Blueprint $table) {
    $table->id();
    $table->string('title');
    $table->text('description');
    $table->timestamps();
});
```

#### Migration: `employees` Table
```php
Schema::create('employees', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->string('position');
    $table->timestamps();
});
```

#### Migration: `employee_project` (Pivot Table)
```php
Schema::create('employee_project', function (Blueprint $table) {
    $table->foreignId('project_id')->constrained()->onDelete('cascade');
    $table->foreignId('employee_id')->constrained()->onDelete('cascade');
});
```

#### Model Setup
```php
class Project extends Model
{
    public function employees()
    {
        return $this->belongsToMany(Employee::class);
    }
}

class Employee extends Model
{
    public function projects()
    {
        return $this->belongsToMany(Project::class);
    }
}
```

### 7. **Movies and Actors**
A movie can feature multiple actors, and an actor can appear in multiple movies.

#### Migration: `movies` Table
```php
Schema::create('movies', function (Blueprint $table) {
    $table->id();
    $table->string('title');
    $table->year('release_year');
    $table->timestamps();
});
```

#### Migration: `actors` Table
```php
Schema::create('actors', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->timestamps();
});
```

#### Migration: `actor_movie` (Pivot Table)
```php
Schema::create('actor_movie', function (Blueprint $table) {
    $table->foreignId('movie_id')->constrained()->onDelete('cascade');
    $table->foreignId('actor_id')->constrained()->onDelete('cascade');
});
```

#### Model Setup
```php
class Movie extends Model
{
    public function actors()
    {
        return $this->belongsToMany(Actor::class);
    }
}

class Actor extends Model
{
    public function movies()
    {
        return $this->belongsToMany(Movie::class);
    }
}
```

### 8. **Students and Clubs**
A student can join multiple clubs, and a club can have multiple student members.

#### Migration: `students` Table
```php
Schema::create('students', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->integer('age');
    $table->timestamps();
});
```

#### Migration: `clubs` Table
```php
Schema::create('clubs', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->timestamps();
});
```

#### Migration: `club_student` (Pivot Table)
```php
Schema::create('club_student', function (Blueprint $table) {
    $table->foreignId('student_id')->constrained()->onDelete('cascade');
    $table->foreignId('club_id')->constrained()->onDelete('cascade');
});
```

#### Model Setup
```php
class Student extends Model
{
    public function clubs()
    {
        return $this->belongsToMany(Club::class);
    }
}

class Club extends Model
{
    public function students()
    {
        return $this->belongsToMany(Student::class);
    }
}
```

### 9. **Books and Libraries**
A book can be available in multiple libraries, and a library can hold multiple books.

#### Migration: `books` Table
```php
Schema::create('books', function (Blueprint $table) {
    $table->id();
    $table->string('title');
    $table->timestamps();
});
```

#### Migration: `libraries` Table
```php
Schema::create('libraries', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->timestamps();
});
```

#### Migration: `book_library` (Pivot Table)
```php
Schema::create('book_library', function (Blueprint $table) {
    $table->foreignId('book_id')->constrained()->onDelete('cascade');
    $table->foreignId('library_id')->constrained()->onDelete('cascade');
});
```

#### Model Setup
```php
class Book extends Model
{
    public function libraries()
    {
        return $this->belongsToMany(Library::class);
    }
}

class Library extends Model
{
    public function books()
    {
        return $this->belongsToMany(Book::class);
    }
}
```

### 10. **Users and Permissions**
A user can have multiple permissions, and a permission can be assigned to multiple users.

#### Migration: `permissions` Table
```php
Schema::create('permissions', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->timestamps();
});
```

#### Migration: `permission_user` (Pivot Table)
```php
Schema::create('permission_user', function (Blueprint $table) {
    $table->foreignId('user_id')->constrained()->onDelete('cascade');
    $table->foreignId('permission_id')->constrained()->onDelete('cascade');
});
```

#### Model Setup
```php
class User extends Model
{
    public function permissions()
    {
        return $this->belongsToMany(Permission::class);
    }
}

class Permission extends Model
{
    public function users()
    {
        return $this->belongsToMany(User::class);
    }
}
```

### Syncing with Additional Data (Pivot Table)
If you need to store additional information in the pivot table, you can define additional fields in the pivot table and use the `withPivot()` method in the model:

```php
Schema::create('employee_project', function (Blueprint $table) {
    $table->foreignId('project_id')->constrained()->onDelete('cascade');
    $table->foreignId('employee_id')->constrained()->onDelete('cascade');
    $table->integer('hours_worked');
    $table->timestamps();
});
```

In the model:

```php
class Project extends Model
{
    public function employees()
    {
        return $this->belongsToMany(Employee::class)->withPivot('hours_worked')->withTimestamps();
    }
}
```

These examples cover various real-world scenarios where many-to-many relationships are useful in Laravel 11. The pivot table is key for storing the relationship between the two entities, and Laravel's `belongsToMany()` method makes it easy to manage these connections.