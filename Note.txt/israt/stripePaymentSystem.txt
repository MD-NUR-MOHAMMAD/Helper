To set up a Stripe payment system in a Laravel 11 application, you'll need to follow these steps. Laravel provides smooth integration with Stripe through the `Cashier` package, but you can also use the Stripe SDK directly if you prefer more control. Here's a basic guide using Cashier:

### 1. Install Laravel Cashier
First, install Laravel Cashier, which simplifies the integration of Stripe payments into your Laravel app.

Run this command to install Cashier via Composer:
```bash
composer require laravel/cashier
```

### 2. Configure Stripe API Keys
To use Stripe, you need to set your Stripe API keys in your `.env` file. If you don’t have API keys, sign up at [Stripe](https://stripe.com) and get them from the dashboard.

Add these lines to your `.env` file:
```bash
STRIPE_KEY=your_stripe_public_key
STRIPE_SECRET=your_stripe_secret_key
```

### 3. Update Model for Billable
To handle payments, you need to update your `User` model (or any other model you’re using for payments) to use the `Billable` trait provided by Cashier.

In `app/Models/User.php`, add:
```php
use Laravel\Cashier\Billable;

class User extends Authenticatable
{
    use Billable;

    // Your user model code
}
```

### 4. Set Up Stripe Webhooks (Optional, but Recommended)
Webhooks are used to notify your app when events, such as successful payments, occur.

Run the following command to create a `web.php` route for Stripe webhooks:
```bash
php artisan cashier:webhook
```

Ensure the webhook URL is registered in your Stripe Dashboard, typically something like `https://yourdomain.com/stripe/webhook`.

### 5. Create Checkout Routes and Controller
Create routes and a controller for handling payment logic.

In `routes/web.php`, define the routes:
```php
use App\Http\Controllers\PaymentController;

Route::get('/checkout', [PaymentController::class, 'checkout'])->name('checkout');
Route::post('/checkout', [PaymentController::class, 'handleCheckout'])->name('checkout.handle');
```

### 6. Create the Payment Controller
Generate the controller using Artisan:
```bash
php artisan make:controller PaymentController
```

In `app/Http/Controllers/PaymentController.php`, add the following code:
```php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Laravel\Cashier\Exceptions\PaymentActionRequired;

class PaymentController extends Controller
{
    public function checkout()
    {
        return view('checkout');
    }

    public function handleCheckout(Request $request)
    {
        $user = $request->user();

        try {
            $paymentMethod = $request->input('payment_method'); // Stripe Payment Method ID
            $user->createOrGetStripeCustomer();
            $user->addPaymentMethod($paymentMethod);

            $user->charge(1000, $paymentMethod); // Charge 10.00 USD

            return back()->with('success', 'Payment successful!');
        } catch (PaymentActionRequired $e) {
            return redirect()->route('checkout', ['payment_intent' => $e->payment->id]);
        }
    }
}
```

This controller handles both displaying the checkout form and processing the payment. The charge is made using the `charge` method with the amount in cents (1000 for 10.00 USD in this case).

### 7. Create Checkout View
In `resources/views`, create a `checkout.blade.php` file for the payment form.

Here’s a simple example of the checkout form using Stripe.js:
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stripe Checkout</title>
    <script src="https://js.stripe.com/v3/"></script>
</head>
<body>
    <h2>Checkout</h2>
    
    <form id="payment-form" action="{{ route('checkout.handle') }}" method="POST">
        @csrf
        <div id="card-element">
            <!-- Stripe.js will insert the card element here -->
        </div>
        <button type="submit" id="submit-button">Pay</button>
    </form>

    <script>
        const stripe = Stripe('{{ env('STRIPE_KEY') }}');
        const elements = stripe.elements();
        const cardElement = elements.create('card');
        cardElement.mount('#card-element');

        const form = document.getElementById('payment-form');

        form.addEventListener('submit', async (event) => {
            event.preventDefault();
            const {paymentMethod, error} = await stripe.createPaymentMethod('card', cardElement);

            if (error) {
                console.error(error);
            } else {
                // Add the payment method ID to the form and submit
                const hiddenInput = document.createElement('input');
                hiddenInput.setAttribute('type', 'hidden');
                hiddenInput.setAttribute('name', 'payment_method');
                hiddenInput.setAttribute('value', paymentMethod.id);
                form.appendChild(hiddenInput);

                form.submit();
            }
        });
    </script>
</body>
</html>
```

This form allows users to input their card details and securely process payments using Stripe's frontend JavaScript library.

### 8. Migrate Your Database (if using subscriptions)
If you're handling subscriptions or need to store billing-related information, you might need to run migrations provided by Cashier:
```bash
php artisan migrate
```

### 9. Test Payment System
Once everything is set up, you can test your payment system using the Stripe test keys and Stripe’s test credit card numbers (e.g., `4242 4242 4242 4242` with any valid future date and CVC).

### Additional Configuration
- **Error Handling**: Ensure you handle errors like failed payments or required authentication properly.
- **Subscriptions**: If your application offers subscriptions, Cashier offers built-in subscription management.
- **Webhooks**: If you handle subscriptions or invoices, webhooks help update the application status in real time.

### Conclusion
This is a basic setup for accepting payments using Stripe in a Laravel 11 app using Cashier. You can extend this by adding features such as subscription management, handling failed payments, and sending receipts. Always ensure you are handling user payment data securely, complying with PCI-DSS standards.